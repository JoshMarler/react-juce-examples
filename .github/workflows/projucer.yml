name: Projucer

on: [push, pull_request, workflow_dispatch]

env:
  # Customize the build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest] #TODO: Add Windows once stable

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Fetch juce dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxext-dev libfreetype6-dev libasound2-dev

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: mkdir ${{runner.workspace}}/build

      - name: CMake Configure Projucer
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE/ext/JUCE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DJUCE_BUILD_EXTRAS=ON .

      - name: Build Projucer
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake --build . --target Projucer --config $BUILD_TYPE

      - name: Run Projucer
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build
        if: matrix.os == 'macos-latest'
        run: extras/Projucer/Projucer_artefacts/Release/Projucer.app/Contents/MacOS/Projucer --resave $GITHUB_WORKSPACE/examples/GainPlugin/GainPlugin.jucer

      - name: Build GainPlugin
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.
        if: matrix.os == 'macos-latest'
        run: xcodebuild -project $GITHUB_WORKSPACE/examples/GainPlugin/Builds/MacOSX/GainPlugin.xcodeproj -target "GainPlugin - Standalone Plugin" -config Release
